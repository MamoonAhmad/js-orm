// BaseField Class

import {
  ModelFieldGeneralError,
  ModelFieldValidationError,
} from "./ModelFieldValidationError";
import type { Model } from "../Model";
import { MODEL_ACTIONS } from "../utils";

export type FieldConfig<T = any> = {
  primaryField?: boolean;
  label?: string;
  description?: string;
  ioName?: string;
  autoGenerated?: boolean;
  nullable?: boolean;
  default?: any;
  parseValue?: (value: any) => T;
};

export type ModelFieldProcessIOObjectArgs = {
  ioObject: Record<string, any>;
  name: string;
  modelInstance: Model;
};

export type ModelFieldEmitValueArgs = {
  value: any;
  name: string;
  modelInstance: Model;
  modelAction: MODEL_ACTIONS;
};

export type ModelFieldSetValueArgs = {
  value: any;
  name: string;
  modelInstance: Model;
  fieldName: string;
};

export type ModelFieldValidateArgs = {
  value: any;
  name: string;
  modelInstance: Model;
  fieldName: string;
  modelAction: MODEL_ACTIONS;
};

export class Field<T = any> {
  primaryField?: boolean;

  label?: string;

  description?: string;

  ioName?: string;

  autoGenerated?: boolean;

  nullable?: boolean;

  default?: T | null;

  parseValueOverride?: (value: any) => T;

  constructor(config: FieldConfig<T>) {
    this.primaryField = !!config?.primaryField || false;

    this.label = config.label?.toString();

    this.description = config.description?.toString();

    this.nullable = !!config.nullable || false;

    this.autoGenerated = !!config.autoGenerated || false;

    this.ioName = config.ioName?.toString();

    this.parseValueOverride = config.parseValue;

    if (config.default !== undefined) {
      this.default = this.parseValue(config.default);
    }
  }

  watchFields(name: string): string[] {
    return [name];
  }

  validate(props: ModelFieldValidateArgs): T | null {
    let { value } = props;

    const isDefined = value !== undefined;
    const isNull = value === null;
    const hasValue = !isNull && isDefined;
    if (!hasValue) {
      if (this.autoGenerated && this.nullable) {
        if (props.modelAction !== MODEL_ACTIONS.CREATE) {
          throw new ModelFieldValidationError(
            FIELD_ERRORS.AUTO_GENERATED_NO_NULLABLE_ON_UPDATE,
            props.fieldName
          );
        }
      } else if (!this.nullable) {
        throw new ModelFieldValidationError(
          FIELD_ERRORS.NOT_NULLABLE,
          props.fieldName
        );
      }
    }

    if (!hasValue) {
      return null;
    }

    try {
      value = this.parseValue(props.value);
    } catch (e: any) {
      throw new ModelFieldValidationError(
        e?.message || e?.toString(),
        props.name
      );
    }

    return value;
  }

  setValue(props: ModelFieldSetValueArgs): Record<string, any> {
    return {
      [props.fieldName]: props.value,
    };
  }

  parseValue(value: any): T | null {
    if (
      this.parseValueOverride &&
      typeof this.parseValueOverride === "function"
    ) {
      return this.parseValueOverride(value);
    }
    return value;
  }

  emitValue(props: ModelFieldEmitValueArgs): Record<string, any> {
    const emitName = this.ioName || props.name;

    let value: any = props.value;

    if (value === undefined || value === null) {
      value = this.default || null;
    } else {
      try {
        value = this.parseValue(value);
      } catch (e: any) {
        throw new ModelFieldGeneralError(
          e?.message || e?.toString(),
          props.name
        );
      }
    }

    return { [emitName]: value };
  }

  fromIOObject(args: ModelFieldProcessIOObjectArgs) {
    const { ioObject, name } = args;
    const ioName = this.getIOName(name)
    const value = this.parseValue(ioObject?.[ioName])
    if((value === null || value === undefined) && !this.nullable) {
      throw new Error('Received a null value for non-nullable field.')
    }
    return {
      [name]: this.parseValue(ioObject?.[ioName]),
    };
  }

  getIOName(name: string) {
    return this.ioName || name;
  }
}

export const FIELD_ERRORS = {
  NOT_NULLABLE: `This field is not nullable.`,
  AUTO_GENERATED_NO_NULLABLE_ON_UPDATE:
    "Auto generated field cannot be nullable on update.",
};

/*

*/
